#pragma ones
/* web file content */
//hexdump.js
const char* file_0 = "// Hexdump.js 0.1.1\n\n// (c) 2011 Dustin Willis Webber\n\n// Hexdump is freely distributable under the MIT license.\n\n// For all details and documentation:\n\n// http://github.com/mephux/hexdump.js\n\n\n\nvar Hexdump;\n\n\n\nHexdump = (function() {\n\n  \n\n  // Hexdump Initializer\n\n  // data => The string payload.\n\n  // options => hexdump configurations\n\n  function Hexdump(data, options) {\n\n    var self = this;\n\n    self.hexdump = [];\n\n    self.hex = false;\n\n    self.options = {\n\n        container: options.container || ''\n\n      , width: options.width || 16\n\n      , byteGrouping: options.byteGrouping || 0\n\n      , ascii: options.ascii\n\n      , lineNumber: options.lineNumber\n\n      , endian: options.endian || 'big'\n\n      , html: options.html\n\n      , base: options.base || 'hexadecimal'\n\n      , nonPrintable: options.nonPrintable || '.'\n\n      , style: {\n\n          lineNumberLeft: options.style.lineNumberLeft || ''\n\n        , lineNumberRight: options.style.lineNumberRight || ':'\n\n        , stringLeft: options.style.stringLeft || '|'\n\n        , stringRight: options.style.stringRight || '|'\n\n        , hexLeft: options.style.hexLeft || ''\n\n        , hexRight: options.style.hexRight || ''\n\n        , hexNull: options.style.hexNull || '.'\n\n        , stringNull: options.style.stringNull || ' '\n\n      }\n\n    };\n\n\n\n    if (self.options.base == 'hex') {\n\n      self.hex = true;\n\n    } else if (self.options.base == 'hexadecimal') {\n\n      self.hex = true;\n\n    };\n\n\n\n    // Check for the line number option and turn it off \n\n    // if not set unless it has been explicitly turned\n\n    // off by the user.\n\n    var ln = self.options.lineNumber;\n\n    if (typeof ln == \"undefined\" || ln == null) {\n\n      self.options.lineNumber = true;\n\n    };\n\n\n\n    var askey = self.options.ascii;\n\n    if (typeof askey == \"undefined\" || askey == null) {\n\n      self.options.ascii = false;\n\n    };\n\n\n\n    \n\n    var html = self.options.html;\n\n    if (typeof html == \"undefined\" || html == null) {\n\n      self.options.html = true;\n\n    };\n\n    \n\n    if (self.endian != ('little' || 'big')) {\n\n      self.endian = 'big';\n\n    };\n\n\n\n    // Make sure spacing is within proper range.\n\n    if (self.options.byteGrouping > data.length) {\n\n      self.options.byteGrouping = data.length;\n\n    };\n\n    self.options.byteGrouping--;\n\n\n\n    // Make sure width is within proper range.\n\n    if (self.options.width > data.length) {\n\n      self.options.width = data.length;\n\n    };\n\n    \n\n    // Base padding\n\n    self.padding = {\n\n      hex: 4,\n\n      dec: 5,\n\n      bin: 8\n\n    };\n\n    \n\n    // Base conversion logic\n\n    switch(self.options.base) {\n\n      case 'hexadecimal': case 'hex': case 16:\n\n        self.setNullPadding(self.padding.hex);\n\n        self.baseConvert = function(characters) {\n\n          \n\n          for (var i=0; i < characters.length; i++) {\n\n            return self.addPadding(characters[i].charCodeAt(0).toString(16), self.padding.hex);\n\n          };\n\n\n\n        }; break;\n\n      case 'decimal': case 'dec': case 10:\n\n        self.setNullPadding(self.padding.dec);\n\n        self.baseConvert = function(characters) {\n\n          \n\n          for (var i=0; i < characters.length; i++) {\n\n            return self.addPadding(characters[i].charCodeAt(0), self.padding.dec);\n\n          };\n\n\n\n        }; break;\n\n      case 'binary': case 'bin': case 2:\n\n        self.setNullPadding(self.padding.bin);\n\n        self.baseConvert = function(characters) {\n\n          for (var i=0; i < characters.length; i++) {\n\n            var ddx = characters[i].charCodeAt(0), r = \"\";\n\n            \n\n            for (var bbx = 0; bbx < 8; bbx++) { \n\n              r = (ddx%2) + r; ddx = Math.floor(ddx/2);\n\n            };\n\n\n\n            return self.addPadding(r, self.padding.bin);\n\n          };\n\n        }; break;\n\n      default:\n\n        self.options.base = 'hex';\n\n        self.hex = true;\n\n\n\n        self.setNullPadding(self.padding.hex);\n\n        self.baseConvert = function(characters) {\n\n\n\n          for (var i=0; i < characters.length; i++) {\n\n            return self.addPadding(characters[i].charCodeAt(0).toString(16), self.padding.hex);\n\n          };\n\n\n\n      };\n\n    };\n\n    \n\n    var regex = new RegExp('.{1,' + this.options.width + '}', 'g');\n\n\n\n    self.data = data.match(regex);\n\n    \n\n    self.nullCount = (self.options.width - self.data[self.data.length - 1].length);\n\n    \n\n    self.hexCounter = 0;\n\n    \n\n    self.stringCounter = 0;\n\n    \n\n    for (var i=0; i < self.data.length; i++) {\n\n      var tempData = self.process(self.data[i]);\n\n      \n\n      self.hexdump.push({\n\n        data: tempData.data,\n\n        string: tempData.string,\n\n        length: self.data[i].length,\n\n        missing: (self.options.width - self.data[i].length)\n\n      });\n\n    };\n\n    \n\n    self.dump();\n\n  }\n\n  \n\n  Hexdump.prototype.dump = function() {\n\n    var self = this;\n\n    \n\n    self.output = '';\n\n    for (var i=0; i < self.hexdump.length; i++) {\n\n      \n\n      if (self.options.lineNumber) { \n\n        var tempLineNumberStyle = '';\n\n        tempLineNumberStyle += self.options.style.lineNumberLeft;\n\n        \n\n        var currentLineCount = (i * self.options.width); //.toString(16);\n\n        var temLineCount = 8 - currentLineCount.toString().length;\n\n        for (var l=0; l < temLineCount; l++) {\n\n          tempLineNumberStyle += '0';\n\n        };\n\n        \n\n        tempLineNumberStyle += currentLineCount;\n\n        tempLineNumberStyle += self.options.style.lineNumberRight + ' ';\n\n        \n\n        if (self.options.html) {\n\n          self.output += '<span id=\"line-number\">'+tempLineNumberStyle+'</span>';\n\n        } else {\n\n          self.output += tempLineNumberStyle;\n\n        };\n\n      };\n\n      \n\n      var spacingCount = 0;\n\n      var breakPoint = Math.floor(self.options.width / 2);\n\n      \n\n      self.output += self.options.style.hexLeft;\n\n      \n\n      for (var x=0; x < self.hexdump[i].data.length; x++) {\n\n        \n\n        if (spacingCount == self.options.byteGrouping) {\n\n          if (x == self.hexdump[i].data.length - 1) {\n\n            self.output += self.hexdump[i].data[x];\n\n          } else {\n\n            self.output += self.hexdump[i].data[x] + ' ';\n\n          };\n\n          spacingCount = 0;\n\n        } else {\n\n          self.output += self.hexdump[i].data[x];\n\n          spacingCount++;\n\n        };\n\n      };\n\n\n\n      self.output += self.options.style.hexRight;\n\n      \n\n      self.appendString(self.hexdump[i]);\n\n      self.output += \"\\n\";\n\n    };\n\n    \n\n    var hexdump_container = document.getElementById(this.options.container);\n\n    hexdump_container.innerHTML = this.output;\n\n  };\n\n  \n\n  Hexdump.prototype.appendString = function(data) {\n\n    var self = this;\n\n    self.output += ' ' + self.options.style.stringLeft;\n\n    self.output += data.string;\n\n    self.output += self.options.style.stringRight;\n\n  };\n\n  \n\n  Hexdump.prototype.splitNulls = function(code) {\n\n    var split = [];\n\n    var buffer = \"\";\n\n    \n\n    if (code && code.length > 2) {\n\n      for (var cc = 0; cc < code.length; cc++) {\n\n        var tempi = cc + 1;\n\n\n\n        if (tempi % 2 == 0) {\n\n          \n\n          buffer += code[cc].toString();\n\n          split.push(buffer);\n\n\n\n          buffer = \"\";\n\n\n\n        } else {\n\n\n\n          buffer += code[cc].toString();\n\n\n\n        };\n\n\n\n      };\n\n    };\n\n    \n\n    return split;\n\n  };\n\n\n\n  Hexdump.prototype.process = function(data) {\n\n    var self = this;\n\n    var stringArray = [];\n\n    var hexArray = [];\n\n    \n\n    for (var i=0; i < data.length; i++) {\n\n      if (self.options.html) {\n\n        \n\n        var code = self.baseConvert(data[i]);\n\n\n\n        if (self.hex) {\n\n          var split = self.splitNulls(code);\n\n          \n\n          for (var y = 0; y < split.length; y++) {\n\n            hexArray.push('<span data-hex-id=\"' + self.hexCounter + '\">' + \n\n            split[y] + '</span>');\n\n          };\n\n\n\n        } else {\n\n\n\n          hexArray.push('<span data-hex-id=\"' + self.hexCounter + '\">' + \n\n          code + '</span>');\n\n\n\n        };\n\n        \n\n        stringArray.push('<span data-string-id=\"' + self.hexCounter + '\">' + \n\n                         self.checkForNonPrintable(data[i]) + '</span>');\n\n\n\n      } else {\n\n\n\n        var code = self.baseConvert(data[i]);\n\n\n\n        if (self.hex) {\n\n          var split = self.splitNulls(code);\n\n          \n\n          for (var y = 0; y < split.length; y++) {\n\n            hexArray.push(split[y]);\n\n          };\n\n\n\n        } else {\n\n          hexArray.push(code);\n\n        };\n\n\n\n        stringArray.push(self.checkForNonPrintable(data[i]));\n\n\n\n      };\n\n\n\n      self.hexCounter++;\n\n    }; \n\n    \n\n   if (self.hex) {\n\n      var splitHexWidth = self.options.width * 2;\n\n    } else {\n\n      var splitHexWidth = self.options.width;\n\n    };\n\n\n\n    if (hexArray.length < splitHexWidth) {\n\n      var amount = (splitHexWidth - hexArray.length);\n\n\n\n      for (var i=0; i < amount; i++) {\n\n        var nullHex = '';\n\n\n\n        if (self.options.html) {\n\n          nullHex = '<span data-hex-null=\"true\">' + self.options.style.hexNull + '</span>';\n\n        } else {\n\n          nullHex = self.options.style.hexNull;\n\n        };\n\n        \n\n        hexArray.push(nullHex);\n\n      };\n\n    };\n\n    \n\n    if (stringArray.length < self.options.width) {\n\n      var stringAmount = self.options.width - stringArray.length;\n\n      for (var i=0; i < stringAmount; i++) {\n\n        var nullString = '';\n\n\n\n        if (self.options.html) {\n\n          nullString = '<span data-string-null=\"true\">' + self.options.style.stringNull + '</span>';\n\n        } else {\n\n          nullString = self.options.style.stringNull;\n\n        };\n\n\n\n\n\n        stringArray.push(nullString);\n\n      };\n\n    };\n\n    \n\n    return { data: hexArray, string: stringArray.join('') };\n\n  };\n\n  \n\n  Hexdump.prototype.setNullPadding = function(padding) {\n\n    var self = this;\n\n    \n\n    var hexNull = self.options.style.hexNull[0]\n\n    self.options.style.hexNull = \"\";\n\n\n\n    if (self.hex) {\n\n      padding = padding / 2;\n\n    };\n\n\n\n    for (var p=0; p < padding; p++) {\n\n      self.options.style.hexNull += hexNull;\n\n    };\n\n  };\n\n  \n\n  Hexdump.prototype.addPadding = function(ch, padding) {\n\n    var self = this, length = ch.toString().length, pad = '';\n\n\n\n    for (var i=0; i < (padding - length); i++) {\n\n      pad += '0'\n\n    };\n\n   \n\n    if (self.options.endian == 'big') {\n\n      return pad + ch;\n\n    } else {\n\n      return ch + pad;\n\n    };\n\n  };\n\n  \n\n  Hexdump.prototype.checkForNonPrintable = function(character) {\n\n    var self = this; \n\n    var c = character.charCodeAt(0).toString(16);\n\n    \n\n    if (c == 0x9) {\n\n      return '.'\n\n    } else if (c == 0x7F) {\n\n      return '.'\n\n    } else if (c.length > 2 && self.options.ascii) {\n\n      return '.'\n\n    } else {\n\n      return character;\n\n    };\n\n\n\n  };\n\n  \n\n  return Hexdump;\n\n})();\n\n\n";

//index.html
const char* file_1 = "<html>\n\n    <head>\n\n        <title>LoraSSDOGS</title>\n\n        <script src=\"index.js\"></script>\n\n        <script src=\"hexdump.js\"></script>\n\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM\" crossorigin=\"anonymous\">\n\n    </head>\n\n    <body>\n\n        <header class=\"p-3 text-bg-dark\">\n\n            <div class=\"container\">\n\n              <div class=\"d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start\">\n\n        \n\n                <form class=\"col-12 form-group mb-3 mb-lg-0 me-lg-3\">\n\n                    <div class=\"row d-flex align-items-center justify-content-center \">\n\n                        <div class=\"input-group m-2\" style=\"width:300px\">\n\n                            <span class=\"input-group-text\">Freqvency</span>\n\n                            <input type=\"number\" id=\"freq\" class=\"form-control\" onchange=\"tuneRadio()\" value=\"434.126\">\n\n                            <span class=\"input-group-text\">Mhz</span>\n\n                        </div>\n\n\n\n                        <div class=\"input-group m-2\" style=\"width:260px\">\n\n                            <span class=\"input-group-text\">Bandwidth</span>\n\n                            <input type=\"number\" id=\"band\" class=\"form-control col-xs-1\" onchange=\"tuneRadio()\" value=\"20.11\">\n\n                            <span class=\"input-group-text\">hz</span>\n\n                        </div>\n\n\n\n                        <div class=\"input-group m-2\" style=\"width:220px\">\n\n                            <span class=\"input-group-text\">SyncWord</span>\n\n                            <span class=\"input-group-text\">0x</span>\n\n                            <input type=\"text\" class=\"form-control\" onchange=\"tuneRadio()\" id=\"syncword\" value=\"11\">\n\n                        </div>\n\n                    </div>\n\n                </form>\n\n              </div>\n\n            </div>\n\n        </header>\n\n\n\n        <div class=\"container-fluid\">\n\n            <div class=\"data row h-100\">\n\n                <div class=\"d-flex flex-column align-items-stretch flex-shrink-0 bg-body-tertiary col-sm-3\">\n\n                    <a class=\"d-flex align-items-center flex-shrink-0 p-3 link-body-emphasis text-decoration-none border-bottom\">\n\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" viewBox=\"0 -960 960 960\"><path d=\"M281-240q-14 0-27.5-14T240-282v-98h500v-340h100q14 0 27 14t13 29v596L721-240H281ZM80-280v-558q0-14 13-28t27-14h519q15 0 28 13.5t13 28.5v356q0 14-13 28t-28 14H240L80-280Zm540-220v-320H140v400l74-80h406Zm-480 0v-320 320Z\"></path></svg>\n\n                        <span class=\"fs-5 fw-semibold\">Messages</span>\n\n                    </a>\n\n                    <div class=\"list-group list-group-flush border-bottom scrollarea\" id=\"messages\">\n\n                    </div>\n\n                </div>\n\n\n\n                <div class=\"col-sm-9 message\">\n\n                    <div class=\"row mt-2 mb-2\">\n\n                        <div class=\"input-group m-2\" style=\"width:200px\">\n\n                            <span class=\"input-group-text\">Sender</span>\n\n                            <span class=\"input-group-text\">0x</span>\n\n                            <input type=\"text\" id=\"sender\" class=\"form-control\" value=\"00\" disabled>\n\n                        </div>\n\n        \n\n                        <div class=\"input-group m-2\" style=\"width:260px\">\n\n                            <span class=\"input-group-text\">Packets</span>\n\n                            <input type=\"text\" id=\"packets\" class=\"form-control col-xs-1\" value=\"0/0\" disabled>\n\n                        </div>\n\n        \n\n                        <div class=\"input-group m-2\" style=\"width:180px\">\n\n                            <span class=\"input-group-text\">Type</span>\n\n                            <input type=\"text\" id=\"type\" class=\"form-control\" value=\"0\" disabled>\n\n                        </div>\n\n\n\n                        <div class=\"input-group m-2\" style=\"width:250px\">\n\n                            <span class=\"input-group-text\">Size</span>\n\n                            <input type=\"text\" class=\"form-control\" id=\"size\" value=\"0\" disabled>\n\n                            <span class=\"input-group-text\">B</span>\n\n                        </div>\n\n        \n\n                        <div class=\"input-group m-2\" style=\"width:250px\">\n\n                            <label class=\"input-group-text\" >Decoder</label>\n\n                            <select class=\"form-select\" id=\"Decoder\" onchange=\"setActiveDecoder(this.value)\">\n\n                                <option value=\"hexdump\" selected=\"\">HexDump</option>\n\n                                <option value=\"text\">Text</option>\n\n                                <option value=\"ukhas\">UKHAS</option>\n\n                                <option value=\"ukhasespsat\">ESPSAT UKHAS</option>\n\n                                <option value=\"jpeg\">JPEG</option>\n\n                            </select>\n\n                        </div>\n\n                    </div>\n\n        \n\n                    <iframe id=\"image\" class=\"h-100 w-100\"></iframe>\n\n                    <pre id=\"hexdump\"></pre>\n\n                    <pre id=\"text\"></pre>\n\n                </div>\n\n            </div>\n\n        </div>\n\n    </body>\n\n</html>\n";

//index.js
const char* file_2 = "var gateway = `ws://${window.location.hostname}/ws`;\n\n\n\nvar SSDO_MAX_SIZE = 230;\n\nvar MAX_OBJECTS   = 10;\n\n\n\nvar SSDO_TYPE_RAW         = 1;\n\nvar SSDO_TYPE_ASCII       = 2; \n\nvar SSDO_TYPE_JPG         = 3;\n\nvar SSDO_TYPE_ASCII_UKHAS = 4;\n\nvar SSDO_TYPE_ASCII_JSON  = 5;\n\n\n\nvar objects = [];\n\nvar lastTime = 0;\n\nvar selected = 0;\n\n\n\nfunction mallocHex(size) {\n\n    var space = \"\";\n\n\n\n    for (var i = 0; i < size; i++) {\n\n        space += \"00\";\n\n    }\n\n\n\n    return space;\n\n}\n\n\n\nfunction setActiveDecoder(decoder) {\n\n    document.getElementById('image').style.display   = \"none\";\n\n    document.getElementById('hexdump').style.display = \"none\";\n\n    document.getElementById('text').style.display    = \"none\";\n\n\n\n\n\n    if (decoder == \"jpeg\") { //IS Image\n\n        document.getElementById('image').style.display = \"block\";\n\n        var base64 = hexToBase64(objects[selected].body);\n\n        document.getElementById('image').src = 'data:image/jpeg;charset=utf-8;base64,' + base64;\n\n    } else if (decoder == \"text\") {\n\n        document.getElementById('text').style.display = \"block\";\n\n        \n\n        if (objects[selected].body.length > 6000) {\n\n            document.getElementById('text').innerHTML = \"File is too big\";\n\n            return;\n\n        }\n\n        \n\n        document.getElementById('text').innerHTML = hex2a(objects[selected].body);\n\n    } else if (decoder == \"ukhas\") {\n\n\n\n        document.getElementById('text').style.display = \"block\";\n\n\n\n        if (objects[selected].body.length > 6000) {\n\n            document.getElementById('text').innerHTML = \"File is too big\";\n\n            return;\n\n        }\n\n\n\n        //$$<payload>,<message number>,<time>,<latitude>,<longitude>,<altitude>,<data>,...,<last data>*<checksum>\n\n        splited = hex2a(objects[selected].body).split(\"$\");\n\n        splited = splited[splited.length - 1].split(\"*\")[0].split(\",\");\n\n\n\n        var table = \"<table class='table table-striped'><tr><td>payload</td><td>\" + splited[0] + \n\n                    \"</td></tr><tr><td>message number</td><td>\" + splited[1] + \n\n                    \"</td></tr><tr><td>time</td><td>\" + splited[2] + \n\n                    \"</td></tr><tr><td>latitude</td><td>\" + splited[3] + \n\n                    \"</td></tr><tr><td>longitude</td><td>\" + splited[4] + \"</td></tr>\" +\n\n                    \"<tr><td>altitude</td><td>\" + splited[5] + \"</td></tr>\";\n\n\n\n        for (var i = 6; i < splited.length; i++) {\n\n            table += \"<tr><td>data\" + i + \"</td><td>\" + splited[i] + \"</td></tr>\";\n\n        }\n\n\n\n        document.getElementById('text').innerHTML = table + \"</table>\";\n\n    } else if (decoder == \"ukhasespsat\") {\n\n        document.getElementById('text').style.display = \"block\";\n\n\n\n        if (objects[selected].body.length > 6000) {\n\n            document.getElementById('text').innerHTML = \"File is too big\";\n\n            return;\n\n        }\n\n\n\n        //$$<payload>,<message number>,<time>,<latitude>,<longitude>,<altitude>,<data>,...,<last data>*<checksum>\n\n        splited = hex2a(objects[selected].body).split(\"$\");\n\n        splited = splited[splited.length - 1].split(\"*\")[0].split(\",\");\n\n\n\n        var table = \"<table class='table table-striped'><tr><td>payload</td><td>\" + splited[0] + \n\n                    \"</td></tr><tr><td>Transmit counter</td><td>\" + splited[1] + \n\n                    \"</td></tr><tr><td>uptime</td><td>\" + splited[2] + \n\n                    \"</td></tr><tr><td>latitude</td><td>\" + splited[3] + \n\n                    \"</td></tr><tr><td>longitude</td><td>\" + splited[4] + \"</td></tr>\" +\n\n                    \"<tr><td>altitude</td><td>\" + splited[5] + \"m</td></tr>\" +\n\n                    \"<tr><td>voltage</td><td>\" + Number(splited[6]) / 100 + \"V</td></tr>\" +\n\n                    \"<tr><td>temperature</td><td>\" + Number(splited[7]) / 10 + \"C</td></tr>\" +\n\n                    \"<tr><td>pressure</td><td>\" + Number(splited[8] / 100) + \"hPa</td></tr>\" +\n\n                    \"<tr><td>lcounter</td><td>\" + splited[9] + \"</td></tr>\" +\n\n                    \"<tr><td>bcounter</td><td>\" + splited[10] + \"</td></tr>\";\n\n\n\n        for (var i = 11; i < splited.length; i++) {\n\n            table += \"<tr><td>data\" + i + \"</td><td>\" + splited[i] + \"</td></tr>\";\n\n        }\n\n\n\n        document.getElementById('text').innerHTML = table + \"</table>\";\n\n    } else { // IS HexDump\n\n        document.getElementById('hexdump').style.display = \"block\";\n\n\n\n        if (objects[selected].body.length > 6000) {\n\n            document.getElementById('hexdump').innerHTML = \"File is too big\";\n\n            return;\n\n        }\n\n        \n\n        new Hexdump(hex2a(objects[selected].body), {\n\n            container: 'hexdump',\n\n            base: 'hex',\n\n            width: 8, \n\n            ascii: true,\n\n            byteGrouping: 1,\n\n            html: true,\n\n            lineNumber: true,\n\n            style: {\n\n                lineNumberLeft: '<span style=\"color:green\">',\n\n                lineNumberRight: '</span>:',\n\n                stringLeft: '|<span style=\"color:orange\">',\n\n                stringRight: '</span>|',\n\n                hexLeft: '',\n\n                hexRight: '',\n\n                hexNull: '.g',\n\n                stringNull: '.'\n\n            }\n\n        });\n\n    }\n\n\n\n    document.getElementById(\"Decoder\").value = decoder;\n\n}\n\n\n\nfunction tuneRadio() {\n\n    var freq     = document.getElementById(\"freq\").value;\n\n    var band     = document.getElementById(\"band\").value;\n\n    var syncword = document.getElementById(\"syncword\").value;\n\n\n\n    \n\n}\n\n\n\nfunction getMessageHtmlListItem(name, time, sender, size) {\n\n    var date = new Date(time);\n\n    \n\n    // Hours part from the timestamp\n\n    var hours = date.getHours();\n\n    \n\n    // Minutes part from the timestamp\n\n    var minutes = \"0\" + date.getMinutes();\n\n    \n\n    // Seconds part from the timestamp\n\n    var seconds = \"0\" + date.getSeconds();\n\n    \n\n    // Will display time in 10:30:23 format\n\n    var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n\n\n\n    return '<a href=\"#\" onClick=\"openMessage(' + time + ')\" id=\"obj' + time + '\" class=\"list-group-item list-group-item-action active py-3 lh-sm\" aria-current=\"true\">' +\n\n                '<div class=\"d-flex w-100 align-items-center justify-content-between\">' +\n\n                    '<strong class=\"mb-1\">' + name + '</strong>' +\n\n                    '<small>' + formattedTime + '</small>' +\n\n                '</div>' +\n\n                '<div class=\"col-10 mb-1 small\">Sender: ' + sender + '<br>Size: ' + size + '</div>' +\n\n            '</a>';\n\n}\n\n\n\nfunction getObjectByTime(time) {\n\n    for (var i = 0; i < objects.length; i++) {\n\n        if (objects[i] != undefined && objects[i].time == time) {\n\n            return objects[i];\n\n        }\n\n    }\n\n\n\n    return undefined;\n\n}\n\n\n\nfunction hex2a(hexx) {\n\n    var hex = hexx.toString();//force conversion\n\n    var str = '';\n\n    for (var i = 0; i < hex.length; i += 2)\n\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n\n    return str;\n\n}\n\n\n\nfunction getPacketsRatio(obj) {\n\n    var packets_sum = 0;\n\n\n\n    for (var i = 0; i < obj.packets.length; i++) {\n\n        if (obj.packets[i] != undefined) {\n\n            packets_sum++;\n\n        }\n\n    }\n\n\n\n    var total = Math.ceil(obj.header.objSize / SSDO_MAX_SIZE);\n\n\n\n    return packets_sum + \" / \" + total;\n\n}\n\n\n\nfunction showMessageData(obj) {\n\n    selected = obj.header.objId;\n\n\n\n    if (obj.header.objType == SSDO_TYPE_JPG) {\n\n        setActiveDecoder(\"jpeg\");\n\n    } else if (obj.header.objType == SSDO_TYPE_ASCII_UKHAS) {\n\n        setActiveDecoder(\"ukhas\");\n\n    } else if (obj.header.objType == SSDO_TYPE_ASCII) {\n\n        setActiveDecoder(\"text\");\n\n    } else {\n\n        setActiveDecoder(\"hexdump\");\n\n    }\n\n\n\n    document.getElementById(\"sender\").value = obj.header.src.toString(16); \n\n    document.getElementById(\"type\").value = obj.header.objType;\n\n    document.getElementById(\"packets\").value = getPacketsRatio(obj);\n\n    document.getElementById(\"size\").value = obj.header.objSize; \n\n}\n\n\n\nfunction openMessage(time) {\n\n    unselectAll();\n\n\n\n    document.getElementById(\"obj\" + time).className = \"list-group-item list-group-item-action active py-3 lh-sm\";\n\n    obj = getObjectByTime(time);\n\n\n\n    showMessageData(obj);\n\n}\n\n\n\nfunction setHex(space, hexData, position) {\n\n    var dataStart   = position * 2;\n\n    var spaceArr    = space.split(\"\"); \n\n    var hexDataArr  = hexData.split(\"\");\n\n\n\n    for (i = 0; i < hexData.length; i++) {\n\n        spaceArr[i + dataStart] = hexDataArr[i];\n\n    }\n\n\n\n    return spaceArr.join(\"\");\n\n}\n\n\n\nfunction unselectAll() {\n\n    var els = document.getElementsByClassName(\"list-group-item list-group-item-action active py-3 lh-sm\");\n\n\n\n    for (var i = 0; i < els.length; i++) {\n\n        els[i].className = \"list-group-item list-group-item-action py-3 lh-sm\"; \n\n    }\n\n}\n\n\n\nfunction hexToBase64(hexstring) {\n\n    return btoa(hexstring.match(/\\w{2}/g).map(function(a) {\n\n        return String.fromCharCode(parseInt(a, 16));\n\n    }).join(\"\"));\n\n}\n\n\n\nfunction objectsCount() {\n\n    var count = 0;\n\n\n\n    for (var i = 0; i < objects.length; i++) {\n\n        if (objects[i] != undefined) {\n\n            count++;\n\n        }\n\n    }\n\n\n\n    return count;\n\n}\n\n\n\nfunction objectsRotation() {\n\n    if (objectsCount() <= 20) {\n\n        return;\n\n    }\n\n\n\n    for (var i = 0; i < objects.length; i++) {\n\n        if (objects[i] != undefined) {\n\n            delete objects[i];\n\n            return;\n\n        }\n\n    }\n\n}\n\n\n\nfunction updateObjectsUI() {\n\n    var last   = objects.length - 1;\n\n\n\n    if (lastTime < objects[last].time) {\n\n        //add new list entity\n\n        unselectAll();\n\n\n\n        document.getElementById(\"messages\").innerHTML = getMessageHtmlListItem(\n\n            \"#0x\" + objects[last].header.objId.toString(16),\n\n            objects[last].time,\n\n            \"0x\" + objects[last].header.src.toString(16),\n\n            objects[last].header.objSize + \"B\"\n\n        ) + document.getElementById(\"messages\").innerHTML; \n\n\n\n        lastTime = objects[last].time;\n\n        selected = last;\n\n\n\n        objectsRotation();\n\n    }\n\n\n\n    if (selected == last) {\n\n        showMessageData(objects[last]);\n\n    }\n\n}\n\n\n\nfunction onMessage(event) {\n\n    var message = JSON.parse(event.data);\n\n    \n\n    if (!(message.header.objId in objects)) {\n\n        objects[message.header.objId] = {\n\n            header: message.header,\n\n            packets: [],\n\n            body:   mallocHex(message.header.objSize),\n\n            time:   Date.now()\n\n        }\n\n    }\n\n\n\n    objects[message.header.objId].body = setHex(\n\n        objects[message.header.objId].body,\n\n        message.body,\n\n        message.header.pktId * objects[message.header.objId].header.pktSize\n\n    )\n\n\n\n    objects[message.header.objId].packets[message.header.pktId] = Date.now();\n\n\n\n    updateObjectsUI();\n\n}\n\n\n\nvar websocket = new WebSocket(gateway);\n\nwebsocket.onmessage = onMessage;\n";

#define ADD_WEB_FILES(server) server.on("/hexdump.js", HTTP_GET, [](AsyncWebServerRequest *request) { request->send(200, "text/html", file_0); });server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) { request->send(200, "text/html", file_1); });server.on("/index.js", HTTP_GET, [](AsyncWebServerRequest *request) { request->send(200, "text/html", file_2); });